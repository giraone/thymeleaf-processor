<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.giraone.thymeleaf</groupId>
    <artifactId>thymeleaf-processor</artifactId>
    <version>0.3.1</version>
    <name>thymeleaf-processor</name>
    <description>HTTP endpoint to create HTML from Thymeleaf template and JSON data</description>

    <properties>
        <!-- Build properties -->
        <java.version>17</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
        <!-- Production code dependency versions -->
		    <commons-text.version>1.9</commons-text.version>
        <pd4ml.version>4.0.15</pd4ml.version>
        <batik.version>1.15</batik.version>
        <springdoc-core.version>1.6.11</springdoc-core.version>
        <springdoc-ui.version>1.6.11</springdoc-ui.version>
        <!-- Test dependency versions -->
        <pdfbox.version>2.0.26</pdfbox.version>
        <!-- Plugin versions -->
        <jacoco-maven-plugin.version>0.8.8</jacoco-maven-plugin.version>
        <!-- Plugin properties -->
        <junit.utReportFolder>${project.testresult.directory}/test</junit.utReportFolder>
        <junit.itReportFolder>${project.testresult.directory}/integrationTest</junit.itReportFolder>
        <jacoco.utReportFolder>${project.build.directory}/jacoco/test</jacoco.utReportFolder>
        <jacoco.utReportFile>${jacoco.utReportFolder}/test.exec</jacoco.utReportFile>
        <jacoco.itReportFolder>${project.build.directory}/jacoco/integrationTest</jacoco.itReportFolder>
        <jacoco.itReportFile>${jacoco.itReportFolder}/integrationTest.exec</jacoco.itReportFile>

        <!-- Sonar rules - Please always mentioned the rules title too! -->
        <!-- S100: Rename this method name to match the regular expression '^[a-z][a-zA-Z0-9]*$'. -->
        <!-- Ignore this for test methods -->
        <sonar.issue.ignore.multicriteria>S100</sonar.issue.ignore.multicriteria>
        <sonar.issue.ignore.multicriteria.S100.ruleKey>java:S100</sonar.issue.ignore.multicriteria.S100.ruleKey>
        <sonar.issue.ignore.multicriteria.S100.resourceKey>src/main/test/**/*</sonar.issue.ignore.multicriteria.S100.resourceKey>
    </properties>

    <dependencies>
        <!-- Classic WebMVC -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- We want Actuator endpoints -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- For HTMl templates -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- For escaping HTML -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>${commons-text.version}</version>
        </dependency>
        <!-- For HTML to PDF conversion -->
        <dependency>
            <groupId>com.pd4ml</groupId>
            <artifactId>pd4ml</artifactId>
            <version>${pd4ml.version}</version>
        </dependency>
        <!-- Apache Batik to render SVG graphics into PDF via PD4ML using Graphics 2D -->
        <dependency>
          <groupId>org.apache.xmlgraphics</groupId>
          <artifactId>batik-bridge</artifactId>
          <version>${batik.version}</version>
          <exclusions>
            <!-- xalan/xerces is not needed and is way too old -->
            <exclusion>
              <groupId>xalan</groupId>
              <artifactId>xalan</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <!--SpringDoc (code-first OpenAPI) dependencies -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-webmvc-core</artifactId>
            <version>${springdoc-core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <version>${springdoc-ui.version}</version>
        </dependency>

        <!-- Developer convenience -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Boot testing  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- PDF manipulation lib for testing PDF generation via PD4ML -->
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>pdfbox</artifactId>
            <version>${pdfbox.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>xmpbox</artifactId>
            <version>${pdfbox.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>preflight</artifactId>
            <version>${pdfbox.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.name}</finalName>

        <plugins>
            <!-- Standard Boot plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- Test coverage with Jacoco -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>pre-unit-tests</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${jacoco.utReportFile}</destFile>
                        </configuration>
                    </execution>
                    <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.utReportFile}</dataFile>
                            <outputDirectory>${jacoco.utReportFolder}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>pre-integration-tests</id>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${jacoco.itReportFile}</destFile>
                        </configuration>
                    </execution>
                    <!-- Ensures that the code coverage report for integration tests is created after integration tests have been run -->
                    <execution>
                        <id>post-integration-tests</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report-integration</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.itReportFile}</dataFile>
                            <outputDirectory>${jacoco.itReportFolder}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <!-- Force alphabetical order to have a reproducible build -->
                    <runOrder>alphabetical</runOrder>
                    <reportsDirectory>${junit.utReportFolder}</reportsDirectory>
                    <excludes>
                        <exclude>**/*IT*</exclude>
                        <exclude>**/*IntTest*</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <configuration>
                    <!-- Due to spring-boot repackage, without adding this property test classes are not found
                         See https://github.com/spring-projects/spring-boot/issues/6254 -->
                    <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                    <!-- Force alphabetical order to have a reproducible build -->
                    <runOrder>alphabetical</runOrder>
                    <reportsDirectory>${junit.itReportFolder}</reportsDirectory>
                    <includes>
                        <include>**/*IT*</include>
                        <include>**/*IntTest*</include>
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>

</project>

